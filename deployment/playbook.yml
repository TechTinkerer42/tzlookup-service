---
- include: base.yml
- include: postgis.yml

- hosts: all
  sudo: yes

  vars:
    deployment_user: developer
    deployment_path: /home/{{ deployment_user }}/tzlookup-service
    checkout_version: master
    db_name: tzlookup
    db_user: tzlookup
    db_passwd: swordfish2

  tasks:
    - apt: pkg={{ item }} state=present
      with_items:
        - git
        - postgis # for shp2pgsql command
        - libpq-dev
        - python-psycopg2 # for ansible's `postgres` module
        - unzip # for ansible's `unarchive`

    # prepare our postgresql
    - postgresql_user: name={{ db_user }} password={{ db_passwd }} role_attr_flags=CREATEDB,NOSUPERUSER
      sudo_user: postgres
    - postgresql_db: name={{ db_name }}
                     encoding='UTF-8'
                     lc_collate='en_US.UTF-8'
                     lc_ctype='en_US.UTF-8'
                     template='template0'
                     owner='{{ db_user }}'
      sudo_user: postgres
    - postgresql_ext: name=postgis db={{ db_name }}
      sudo_user: postgres
    - postgresql_privs: db={{ db_name }}
                        privs=ALL
                        objs=ALL_IN_SCHEMA
                        type=table
                        role={{ db_user }}
      sudo_user: postgres

    # import shapefile
    - get_url: url=http://efele.net/maps/tz/world/tz_world.zip dest=/tmp/tz_world.zip
    - unarchive: src=/tmp/tz_world.zip dest=/tmp/ copy=no
    - shell: shp2pgsql -d -S -s 4326 -I /tmp/world/tz_world | psql -h localhost -U {{ db_user }} {{ db_name }}
      environment:
        PGPASSWORD: "{{ db_passwd }}"

    # checkout app
    - copy: src=files/id_rsa dest=/home/{{ deployment_user }}/.ssh/id_rsa owner={{ deployment_user }} group={{ deployment_user }} mode="u+rw,g-rwx,o-rwx"
    - copy: src=files/id_rsa.pub dest=/home/{{ deployment_user }}/.ssh/id_rsa.pub owner={{ deployment_user }} group={{ deployment_user }} mode="u+rw,g-rwx,o-rwx"
    - git: repo=git@github.com:tinnet/tzlookup-service.git dest={{ deployment_path }} version={{ checkout_version }} key_file=/home/{{ deployment_user }}/.ssh/id_rsa
      sudo_user: "{{ deployment_user }}"

    # prepare app
    - command: bundle install --deployment chdir={{ deployment_path }}

    # setup puma via upstart (https://github.com/puma/puma/tree/master/tools/jungle/upstart)
    - file: path={{ deployment_path }}/tmp/puma state=directory mode=0755 owner={{ deployment_user }}
    - template: src=templates/init/puma-manager.conf dest=/etc/init/puma-manager.conf
    - template: src=templates/init/puma.conf dest=/etc/init/puma.conf
    - file: path={{ deployment_path }}/config state=directory mode=0755 owner={{ deployment_user }}
    - template: src=templates/puma.rb dest={{ deployment_path }}/config/puma.rb

    - file: path=/etc/puma.conf state=touch
    - lineinfile: dest=/etc/puma.conf line={{ deployment_path }}
    - service: name=puma-manager enabled=yes state=started
